프로그램 실행 여부에 따른 테스트
-> 1. 정적 테스트
   = 1. 프로그램 실행 X, 명세서 & 소스 코드 대상으로 분석
   = 2. 워크스루, 인스펙션, 코드 검사

-> 2. 동적 테스트
   = 1. 프로그램 실행 O, 오류 찾음
   = 2. S/W 개발의 모든 단계에서 테스트를 수행
   = 3. 블랙박스 테스트, 화이트박스 테스트


테스트 기반에 따른 테스트
-> 1. 명세 기반 테스트
   = 1. 사용자 요구사항 빠짐없이 TC(테스트 케이스) 구현 여부 확인
   = 2. 동등 분할, 경계 값 분석

-> 2. 구조 기반 테스트
   = 1. S/W 내부 논리 흐름에 따라 TC 작성
   = 2. 구문 기반, 결정 기반, 조건 기반

-> 3. 경험 기반 테스트
   = 1. 유사 S/W 나 기술 등에 대한 테스터의 경험
   = 2. 사용자 요구사항 명세 불충분, 테스트 시간 제약 있을 경우 수행
   = 3. 에러 추정, 체크 리스트, 탐색적 리스팅


시각에 따른 테스트
-> 1. 검증 테스트
   = 개발자의 시각, 제품 생산과정 테스트, 제품이 명세서대로 완성됐는지 테스트

-> 2. 확인 테스트
   = 사용자의 시각, 제품 결과 테스트, 사용자 요구한대로 완성됐는지 테스트


목적에 따른 테스트
-> 1. 회복 테스트 
   = 시스템에 여러 가지 결함 주고, 올바르게 복구되는지 확인

-> 2. 안전 테스트
   = 시스템 보호 도구가 불법 침입으로부터 시스템 보호할 수 있는지 테스트

-> 3. 강도 테스트
   = 시스템 과도한 정보량, 빈도 부과, 과부하 시 S/W 의 정상적 실행 여부 확인

-> 4. 성능 테스트
   = S/W 실시간 성능, 전체적인 효율성 진단, S/W 응답시간, 처리량 테스트

-> 5. 구조 테스트
   = S/W 의 논리적 경로, 소스 코드 복잡도 평가

-> 6. 회귀 테스트
   = S/W 변경 또는 수정된 코드에 새로운 결함 여부 확인

-> 7. 병행 테스트
   = 변경된 S/W 와 기존의 S/W 에 동일한 데이터를 입력하여 결과를 비교
