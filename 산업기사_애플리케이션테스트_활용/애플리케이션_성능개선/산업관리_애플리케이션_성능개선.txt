소스 코드 최적화

1. 나쁜 코드를 배제하고, 클린 코드로 작성하는 것
2. 클린 코드 -> 누구나 쉽게 이해, 수정 및 추가, 단순, 명료한 코드, 잘 작성된 코드
3. 나쁜 코드
-> 1. 프로그램 로직이 복잡하고 이해하기 어려운 코드
-> 2. 스파게티 코드 - 코드 로직 서로 복잡하게 얽혀진 코드
-> 3. 외계인 코드 - 아주 오래되거나 참고문서, 개발자 없어 유지보수 작업 어려운 코드


클린 코드 작성 원칙

1. 가독성 - 누구든지 코드 쉽게 읽을 수 있도록 작성, 이해하기 쉬운 용어, 들여쓰기
2. 단순성 - 코드 간단하게 작성, 한 번에 한 가지 처리 코드 작성, 클래스/메소드/함수
3. 의존성 배제 - 코드가 다른 모듈 영향 최소화, 다른 부분 영향 없도록 작성
4. 중복성 최소화 - 코드 중복 최소화, 중복된 코드 삭제 및 공통된 코드 사용
5. 추상화 - 클래스/메소드/함수 (상위) -> 애플리케이션 특성, 하위 -> 상세 내용


소스 코드 품질 분석 도구

1. 코딩스타일, 코딩표준, 코드 복잡도, 메모리 누수 현상, 스레드 결함 발견위해 사용 
2. 정적 분석 도구 
-> 1. 작성한 소스코드 실행 X, 코딩표준, 스타일, 결함 확인
-> 2. pmd, cppcheck, SonarQube, checkstyle, ccm, cobertura

3. 동적 분석 도구
-> 1. 작성한 소스코드 실행, 코드에 존재하는 메모리 누수, 스레드 결함 분석
-> 2. Avalanche, Valgrind


소스 코드 품질 분석 도구의 종류

1. pmd -> 소스코드 미사용 변수, 최적화되지 않은 코드, 결함 유발 코드 - Linux, Windows
2. cppcheck -> C/C++ 코드 메모리 누수, 오버플로우 분석 - Windows
3. SonarQube -> 중복코드, 복잡도, 코딩설계 분석, 소스분석 통합 플랫폼 - CrossPlatform
4. checkstyle -> 자바코드, 소스코드표준, 다양한 개발도구 통합 사용 - CrossPlatform
5. ccm -> 다양한 언어 코드 복잡도 분석 - CrossPlatform
6. cobertura -> 자바 언어의 소스코드 복잡도 분석 및 테스트 커버리지 - CrossPlatform
7. Avalanche -> Valgrint 프레임워크, STP 기반, 프로그램 결함, 취약점 - Linux, Android
8. Valgrind -> 프로그램 내 존재하는 메모리 및 쓰레드 결함 분석 - CrossPlatform
