공유 폴더 방식

- 1. 버전 관리 자료가 지역 컴퓨터의 공유 폴더에 저장되어 관리되는 방식
- 2. 파일 잘못 복사, 다른 위치로 복사하는 것 대비, 파일 변경사항을 DB 기록하여 관리
- 3. SCSS, RCS, PVCS, QVCS


클라이언트 / 서버 방식

- 1. 버전 관리 자료가 서버에 저장되어 관리되는 방식
- 2. 모든 버전관리 서버에서 수행
- 3. 서버 복구 전까지 다른 개발자와 협업, 버전관리작업 중단
- 4. CVS, SVN(Subversion), CVSNT, Clear Case, CMVC, Perforce


분산 저장소 방식

- 1. 버전 관리 자료가 원격 저장소와 개발자 PC 지역 저장소와 함께 저장되어 관리
- 2. Git, GNU arch, DCVS, Bazaar, Mercurial, TeamWare, Bitkeeper, Plastic SCM


Subversion (서브버전, SVN)

- 1. CVS 개선, 아파치 S/W 재단에서 2000년 발표, Client/Server 구조
- 2. 오픈소스, 파일, Directory 이름 변경, 이동 가능
- 3. 주요 명령어
  = 1. add -> 새로운 파일, Directory 버전 관리 대상, add 로 등록안된것, commit 노적용
  = 2. commit -> 버전관리 대상, Client Source 파일을 Server Source 파일에 적용
  = 3. update -> 서버 최신 commit 이력 Client Source 파일 적용
  = 4. checkout -> 버전 관리 정보, 소스 파일 서버에서 Client 로 받아옴
  = 5. lock/unlock -> 서버 Source 파일이나 Directory 잠그거나 해제
  = 6. import -> 아무것도 없는 서버 저장소, 맨 처음 소스 파일 저장하는 명령어, 일회성
  = 7. export -> 버전관리에 대한 정보, 순수한 Source file 만을 Server 에서 받아옴
  = 8. info -> 지정한 파일 위치, 마지막 수정 일자 등에 대한 정보 표시
  = 9. diff -> 지정된 파일이나 경로, 이전 리버전과 차이 표시
  = 10. merge -> 다른 디렉터리, 작업된 버전 관리 내역, 기본 개발 작업과 병합


Git

- 1. 리누스 토발즈, 2005년 리눅스커널 개발에 사용할 관리 도구, 주니오 하마노 유지보수
- 2. 분산버전 관리시스템, 2개의 저장소, local 저장소, 원격 저장소
- 3. 버전관리 지역저장소, 버전관리 신속 처리 가능
- 4. 원격 저장소나 네트워크 문제있어도 작업 가능
- 5. 주요 명령어
  = 1. add -> 지역 저장소의 staging 영역, --all 옵션으로 작업 디렉터리 모든 파일 적용
  = 2. commit -> 작업 내역을 지역 저장소에 저장
  = 3. branch -> 새로운 브랜치 생성, commit 하면 master branch 생성
  = 4. checkout -> 지정한 브랜치로 이동, HEAD 포인터
  = 5. merge -> 지정한 브랜치 변경내역, 현재 HEAD 포인터 가르키는 브랜치 반영, 병합
  = 6. init -> 지역 저장소 생성
  = 7. remote add -> 원격 저장소 연결
  = 8. push -> 로컬 저장소 변경 내역을 원격 저장소에 반영
  = 9. fetch -> 원격 저장소의 변경 이력만을 지역 저장소에 가져와 반영
  = 10. clone -> 원격 저장소의 전체 내용을 지역 저장소로 복제
  = 11. fork -> 지정한 원격 저장소의 내용을 자신의 원격 저장소로 복제
