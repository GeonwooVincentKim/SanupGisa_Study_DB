1. ER 모델

2. 

abstract class Disk {
  int v = 250;
  String f = "SATA3";

  void volumn() {System.out.println("volumn : " + v + "GB")'}
  void formfactor() {System.out.println("formfactor : " + f);}
}

class Sevo extends Disk {
  Sevo (int v) {
    super.v = v;
    super.f = "NVME";
  }
  void spec() {System.out.println("r/w : 3.5/3.2");}
}

class Mcrucial extends Disk {
  Mcrucial(int v) {super.v = v;}
  String t = "TLC":

  void volumn() {System.out.println("volumn : " + v + "TB");}
  void type() {System.out.println("type : " + t);}
}

public class Test {
  public static void main(String[] args) {
    Sevo a = new Sevo(500);
  
    Mcrucial b = new Mcrucial(1);
    a.volumn();
    a.formfactor();
    a.spec();
    
    b.volumn();
    b.formfactor();
    b.type();
  }
}


- 1. super.f = "NVME";
- 2. b.type();


3. <>

int a[5][5], j = 0, sw = 1, k = 1;

for(int i = 0; i < 5; i++){
  while (j <= 4 && j >= 0) {
    a[i][j] = k++;
    j += sw;
  }

  j += sw;
}

for (int i = 0; i < 5; i++) {
  for (int j = 0; j < 5; j++) {
    printf("%3d", a[i][j]);
  }

  printf("\n");
}


i = 0; 

a[0][0] = 1, k = 2 (k++ 후위연산자로 인하여)
j = 0 + 1; (1)

a[0][1] = 2, k = 3
j = 1 + 1; (2)

a[0][2] = 3, k = 4
j = 2 + 1; (3)

a[0][3] = 4, k = 5
j = 3 + 1; (4)

a[0][4] = 5
j = 4 + 1; (5)

sw *= -1

-> sw *= -1


4. CREATE TABLE VIEW v_사원 AS SELECT 사번, 이름, 부서 FROM 사원;

5. 

- 1. 유니캐스트 <>
- 2. 멀티캐스트
- 3. 애니캐스트


6. stdlib.h

7. 15, 9

8. 슬라이딩 윈도우 <>

9. 

- 1. cnt++; -> 1
- 2. b = 120, a = 3
- 3. 120 = 120 / 3  = 40 (b)

- 4. cnt++; -> 2
- 5. b = 40, a = 3
- 6. b = 40 / 3 = 13 (b)

- 7. cnt++; -> 3
- 8. b = 13, a = 3
- 9. b = 13 / 3 = 4 (b)

- 10. cnt++; -> 4
- 11. b = 4, a = 3
- 12. b = 4 / 3 = 1 (b)

- 13. cnt++; -> 5
- 14. b = 1, a = 3
- 15. b = 1 / 3 = 0 (b)


-> 5


10. 

- 1. 화이트박스 테스트
- 2. 블랙박스 테스트
- 3. 하향식
- 4. 상향식


11. 

- 1. commit
- 2. push


12. MacOS

13. <가상 호스팅>

14. 직관성, 유효성, 학습성, 유연성 <>

15. 통합 테스트 <>

16. 20 40 60

17. SELECT DISTINCT 거주지 FROM 회원 WHERE 신청강의 IN (SELECT 강의코드 FROM 강의 WHERE 강의명 = '서예');

18. 1, 2, 3, 4, 5, 3, 4, 5, 3, 6, 7

19. 일관성, 가독성, 명확성, 이식성, 수정 용이성 <이해성, 수정 용이성, 자원 효율성, 일관성>

20. <00001011>

- 1. a[] = size(8)
- 2. d = 11, n = 0;
- 3. a[0] = 11 % 2; -> a[0] = 1; a[1] = 1;
- 4. 11 /= 2; -> d = 5

- 5. a[1] = 5 % 2; -> a[2] = 1; a[3] = 1;
- 6. 5 /= 2; -> d = 2

- 7. a[2] = 2 % 2; -> a[4] = 0; a[5] = 0;
- 8. 2 /= 2; -> d = 0


-> 1
