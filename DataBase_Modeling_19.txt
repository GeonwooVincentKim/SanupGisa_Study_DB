1. 종료점의 처리
- 1. 종료점이 미정이므로 NULL
  = 1. 논리적으로는 타당하지만 비교가 불가능
  = 2. Index 사용하지 못하므로, 수평축도 저하

- 2. 수렴하므로 최대치 부여
  = 1. 이미 원자값이 수렴하지 않았으므로 무한히 계속되는 것으로 간주
  = 2. 수렴하므로, 최대치를 날짜라면 9999/12/31
  = 3. 가능한 TABLE Create 하는 Script 에다가, Default Constraint 를 줌


2. BETWEEN Query 의 특징
- 1. Column_name BETWEEN 시작값 AND 종료값
  = 그 Column 의 범위 값을 읽음

- 2. value BETWEEN 시작-Column AND 종료-COLUMN
  = 1. 시작-Column Start <= :value AND 종료-Column >= :value
  = 2. Index 에 두 개에 Column 이 조건을 다 갖추더라도 내 앞에 있는 Column 이 이 Query 안에 안들면 다 흘러내림
  = 3. 기존 SQL 의 Equal 로만 해결하려고 하지 말고, 선분과 점 (그룹 이력) 을 활용하여 해결
  = 4. 선분의 Join 활용

- 3. Example (전화번호)
  = 1. 할당받은 번호들을 모두 번호별로 분리해서 관리할 것인가에 대한 여부
  = 2. 미사용 중인 전화번호를 하나로 관리할 것인가에 대한 여부

3. 선분의 Join
- 1. 선분 A 와 선분 B 를 서로의 과거, 현재, 미래 시점을 서로 비교
  = Example (Picture)
                      ┌------- 1급 ->  (선분 A)
     -- 2급 -------┘
           
                                ┌ 1,거 (선분 A, B 이력관리)
                      ┌ 1,서 ┘           
             ┌ 2,서 ┘
     - 2,강 ┘

                                ┌ 거제도 -> (선분 B)
              ┌- 서울시 ----┘
     - 강원 ┘

- 2. 선분 A 와 선분 B 의 시작일과 종료일을 비교, 시작점을 Greatest List 를 취하고, 종료점을 List 로 취하기
  = 1. Example (Picture)
                       ┌------- 1급 ->  (선분 A)
     *-- 2급 -------*
   (시작점)         (종료점)
           
                                ┌ 1,거 (선분 A, B 이력관리)
                      ┌ 1,서 ┘           
             ┌ 2,서 ┘
     - 2,강 ┘

                                ┌ 거제도 -> (선분 B)
               *- 서울시 ----┘
     *- 강원 ┘
  (시작점)  (종료점)

  = 2. `시작점의 Greatest List 를 취한다`는 뜻은 선분 A 의 시작점과 선분 B 의 시작점을 비교
  = 3. 둘 중 먼저 종료점을 찍는 점을 가지고 있는 선분이 `시작점의 Greatest List 를 취한다` 라는 뜻

- 3. 각 취한 List 들을 따로 선분으로 빼내어 관리
  = 1. Example (Picture)
                      ┌------- 1급 ->  (선분 A)
     -- 2급 -------┘
           
                                ┌ 1,거 (선분 A, B 이력관리)
                      ┌ 1,서 ┘           
             ┌ 2,서 ┘
     - 2,강 ┘

                                ┌ 거제도 -> (선분 B)
              ┌- 서울시 ----┘
     - 강원 ┘

  = 2. 어떤 경우의 수가 나오더라도 하나의 Join 문장이면 간단하게 풀 수 있음
     -> 1. 선분과 점을 통해 비교를 하다보면 쉽게 해결 가능 
     -> 2. Equal 이라는 고정관념 (찾고자 하는 데이터와 `같은 것`들을 찾아내라) 을 버리고 작업하면 쉬움

