1. 계층형 데이터 모델
- 1. 하위 계층의 UID 는 상위 계층 UID 의 집합
- 2. 조직이 변경되면 ID 를 바꾸어야 함
- 3. 인조 (Aritifical) UID 를 생성
- 4. 종속적인 UID
  = 1. PERFORMANCE 유리
  = 2. 구조 변경에 취약

- 5. 독립적인 UID
  = 1. PERFORMANCE 불리
  = 2. 구조 변경에 쉽게 대응

2. 순환 (Recursive) 관계 데이터 모델
- 1. 정의
  = 1. 하나의 순환 ENTITY 는 각 ENTITY 의 모든 ATTRIBUTE 를 포함해야 함
  = 2. 각 계층에 있는 ATTRIBUTE 는 동일하게 하는 것이 가장 좋음
  = 3. 순환 모델은 Mandatory 관계로 취급될 수 없음
     -> 1. 순환 모델은 직선이 생기지 않음
         => 1. 직선 가진다 => 반드시 부모 ENTITY 를 가져야 함
         => 2. 직선 가진다 => 제일 꼭대기 ENTITY 가 필요한데, 그건 불가능

     -> 2. 부모 ENTITY 를 가지지 않음

  = 4. (무한 LOOP 발생) 반드시 Optional 관계
  = 5. 순환 모델은 조직의 변경 (추가, 삭제) 에 쉽게 대응

- 2. 계층 구조와 순환 구조의 역학 관계
  = 1. 계층 구조로 된 카드를 합치니깐 자연스럽게 한 통에서 한 통으로 한 곳을 따름
  = 2. 계층 구조 통합 시, 순환 구조로 변함

- 3. 순환 구조
  = 1. 통에 있는 각 인자들끼리의 구조
  = 2. 각 인자들 간 높낮이가 존재
  = 3. 선분이 아무리 많고 옆으로 가지가 많더라고, 선분 하나만 있으면 모든 구조를 표현 가능
     -> 1. 나중에 어떤 새로운 가지가 나오더라도 선분 하나면 충분
     -> 2. 변화 없음
  
  = 4. 순환 (Recursive) 모델을 처리할 수 있는 DB
     -> 1. Oracle
     -> 2. 나머지 DB 는 Logic 으로 구현

- 4. 계층 구조의 통합
  = 1. 복잡한 관계를 가지고 있는 ENTITY 가 자식을 둘 때, 더 복잡한 관계에 빠짐
  = 2. 복잡한 관계를 가지고 있는 ENTITY 들을 둘러싸는 하나의 집합을 생성 시, Simple RELATION 을 통해 단순한 관계로 구성 가능
  = 3. 새로 생성된 하나의 집합은 RECURSIVE 구조의 선분으로 표현될 수 있음

- 5. 순환 구조의 유의사항
  = 1. ERD 에서는 나타나 있지 않지만, Table 의 COLUMN 에 `상위부서코드` 라는 명칭으로 생성된 COLUMN 은 사실은 `순환관계`
  = 2. 최상위 NULL OK
  = 3. 최상위에 동일한 값을 지정하는 것은 NO

3. BOM Data Model
- 1. BOM (Bill Of Material) Model 은 M : M 순환관계
- 2. 새로운 교차 (Intersection) ENTITY 를 추가하여 M : 1 관계로 변경
- 3. 볼트와 너트
  = 1. Example -> 자동차
     -> 1. 자동차 엔진
     -> 2. 자동차 트렁크
     -> 3. 자동차 바퀴
  
  = 2. 통상적으로 자식은 반드시 하나의 부모로부터 값을 가짐
  = 3. BOM Data Model 에서는 다른 부모로부터 값을 가질 수 있음 -> 볼트와 너트

- 4. 부모는 N 개의 자식 부품 소유, 자식은 N 개의 부모 부품 소유
  = N : N 관계 성립

- 5.  M : M 순환관계에서 Intersection ENTITY (Relation ENTITY) 가 만들어짐
- 6. 전개의 정의
  = 1. 나 자신인가 내 부모와의 RELATION 하나만 관리하게 될 경우, LOGIC 으로 풀 수 있는데, 이 과정을 전개라고 부름
  = 2. 순전개 (Implosion) 와 역전개 (Explosion)
     -> 1. 순전개 (Implosion)
         => 1. 제일 꼭대기 ENTITY 가 중간에 있는 ENTITY 개체를 하나 끄집어 내고, 그 중간에 있는 ENTITY 개체의 자손들을 보는 과정
         => 2. 제일 꼭대기 ENTITY -> 중간 ENTITY -> 중간 ENTITY 의 자손
         => 3. 하위로 내려가면 개체의 자손들이 만들어짐
     
     -> 2. 역전개 (Explosion)
         => 1. 어떤 임의의 ENTITY 를 중심으로 거꾸로 올라감
         => 2. 내 위의 1대 부모, 10대 부모, 선조가 누구인지 확인하는 과정
         => 3. 제일 꼭대기 ENTITY <- 중간 ENTITY <- 중간 ENTITY 의 자손
       
4. M : M 구조와 BOM 구조 비교
- 1. M : M 구조는 Relation ENTITY 가 만들어짐 (Entity 2개)
- 2. BOM 구조는 ENTITY 가 하나이므로, 선분이 같은 ENTITY 에서 나옴

5. 순환 관계의 처리 (1 : M)
- 1. CODE 대비법 (CODE 법)
  = 1. 사용하기가 쉽고 간편하며, 수행속에 상대적으로 유리
  = 2. 구조 변경에 매우 취약 (식별자 변경)
     -> 1. UID 에는, Identify (식별자) 나 Structure (주소, 이름(개명), 나이) 가 존재
     -> 2. UID 잘못 변경 시, Structure 는 바뀔 수 있지만, Identify 가 변경되면 데이터의 일관성이 사라지므로, Identify 는 변경되면 안됨
     -> 3. UID 변경 시, Identify 는 한 번 등록이 되었으면 바뀔 수 없으므로, Structure 만 변경이 됨

  = 3. 구조 변경 시 과거 Data 의 수정 필요
  = 4. M : M 관계일 때 사용할 경우, 동일한 개체의 이름이 300개 (여러 개)가 되는 말도 안되는 상황이 생김
     -> 구조 변화가 많이 일어나지 않는 목록은 CODE 대비법으로 처리
         => Example -> 개정 과목

- 2. 순환 전개법
  = 1. 구조 (순환 관계) 가 변경되도 식별자는 변경하지 않아 과거 Data 변경 불필요
     -> 1. UID 의 Identify 는 변경되지 않음
     -> 2. UID 의 Structure 만 변경되므로, 문제 없음
     -> 3. Implementation 능력이 없이 사용하면, 굉장이 고생할 수 있음

  = 2. 사용이 약간 불편하며, 숙달된 기술력 필요
  = 3. 고도의 기술력 필요 (잘못 사용 시 수행속도 저하)

6. 순환 관계의 처리 (M : M)
- 순환 (Recursive) 관계와 BOM 구조 특징
  = 가장 Simple 한 방법으로 Data 를 관리하고 있다가 내가 풀고 싶은 구조가 나오면 어디서부터 역전개, 어디서부터 순전개라고 말하는 순간에 이 구조는 정해야 함

7. 순환 관계의 처리 SQL (JOIN 과 비교)
- 1. 기존의 JOIN 문장과 비교를 해서 Connected-By Starter 를 가지고 풀어내는 Structuer 문장 (JOIN Table)
  = 1. 최종적으로는 Drive 조건 Check 조건을 다 만족하는 최종 결과가 나옴
  = 2. 일을 하는 내부 과정을 살펴보면 일을 주도하는 부분이 있고, 그 주도해서 끄집어 내놓은 것을 다시 Check 조건에서 버리는 역할이 있음
  = 3. Driving 관리자 => DataBase 의 Optimizer 가 누가 관리자인지 판단

- 2. 기존의 JOIN 문장에 비교를 해서 설명하자면, 두 개의 구조상의 차이가 무엇인지, 동일한 것이 무엇인지 이해해야 함 (JOIN 조건)
  = 1. CONNECT BY START With 문장의 연결 고리는 WHERE Clause 가 아님
  = 2. Connect By 절에 쓴 Condition 이 Join 의 연결고리

- 3. 전처리 조건
  = START WITH => Driving Condition

- 4. CHECK 조건
  = 1. Driving Condition 을 뺀 나머지는 CHECK 조건
  = 2. Check 조건은 Where Clause 에 있음


