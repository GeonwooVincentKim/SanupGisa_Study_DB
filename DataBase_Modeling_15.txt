1. 계층형 데이터 모델
- 1. 하위 계층의 UID 는 상위 계층 UID 의 집합
- 2. 조직이 변경되면 ID 를 바꾸어야 함
- 3. 인조 (Aritifical) UID 를 생성
- 4. 종속적인 UID
  = 1. PERFORMANCE 유리
  = 2. 구조 변경에 취약

- 5. 독립적인 UID
  = 1. PERFORMANCE 불리
  = 2. 구조 변경에 쉽게 대응

2. 순환 (Recursive) 관계 데이터 모델
- 1. 정의
  = 1. 하나의 순환 ENTITY 는 각 ENTITY 의 모든 ATTRIBUTE 를 포함해야 함
  = 2. 각 계층에 있는 ATTRIBUTE 는 동일하게 하는 것이 가장 좋음
  = 3. 순환 모델은 Mandatory 관계로 취급될 수 없음
     -> 1. 순환 모델은 직선이 생기지 않음
         => 1. 직선 가진다 => 반드시 부모 ENTITY 를 가져야 함
         => 2. 직선 가진다 => 제일 꼭대기 ENTITY 가 필요한데, 그건 불가능

     -> 2. 부모 ENTITY 를 가지지 않음

  = 4. (무한 LOOP 발생) 반드시 Optional 관계
  = 5. 순환 모델은 조직의 변경 (추가, 삭제) 에 쉽게 대응

- 2. 계층 구조와 순환 구조의 역학 관계
  = 1. 계층 구조로 된 카드를 합치니깐 자연스럽게 한 통에서 한 통으로 한 곳을 따름
  = 2. 계층 구조 통합 시, 순환 구조로 변함

- 3. 순환 구조
  = 1. 통에 있는 각 인자들끼리의 구조
  = 2. 각 인자들 간 높낮이가 존재
  = 3. 선분이 아무리 많고 옆으로 가지가 많더라고, 선분 하나만 있으면 모든 구조를 표현 가능
     -> 1. 나중에 어떤 새로운 가지가 나오더라도 선분 하나면 충분
     -> 2. 변화 없음
  
  = 4. 순환 (Recursive) 모델을 처리할 수 있는 DB
     -> 1. Oracle
     -> 2. 나머지 DB 는 Logic 으로 구현

- 4. 계층 구조의 통합
  = 1. 복잡한 관계를 가지고 있는 ENTITY 가 자식을 둘 때, 더 복잡한 관계에 빠짐
  = 2. 복잡한 관계를 가지고 있는 ENTITY 들을 둘러싸는 하나의 집합을 생성 시, Simple RELATION 을 통해 단순한 관계로 구성 가능
  = 3. 새로 생성된 하나의 집합은 RECURSIVE 구조의 선분으로 표현될 수 있음

- 5. 순환 구조의 유의사항
  = 1. ERD 에서는 나타나 있지 않지만, Table 의 COLUMN 에 `상위부서코드` 라는 명칭으로 생성된 COLUMN 은 사실은 `순환관계`
  = 2. 최상위 NULL OK
  = 3. 최상위에 동일한 값을 지정하는 것은 NO

3. BOM Data Model
- 1. BOM (Bill Of Material) Model 은 M : M 순환관계
- 2. 새로운 교차 (Intersection) ENTITY 를 추가하여 M : 1 관계로 변경
- 3. 볼트와 너트
  = 1. Example -> 자동차
     -> 1. 자동차 엔진
     -> 2. 자동차 트렁크
     -> 3. 자동차 바퀴
  
  = 2. 통상적으로 자식은 반드시 하나의 부모로부터 값을 가짐
  = 3. BOM Data Model 에서는 다른 부모로부터 값을 가질 수 있음 -> 볼트와 너트

- 4. 부모는 N 개의 자식 부품 소유, 자식은 N 개의 부모 부품 소유
  = N : N 관계 성립

- 5.  M : M 순환관계에서 Intersection ENTITY (Relation ENTITY) 가 만들어짐
