1. 실전 연구 (Relationship)
- 1. 관계 분류에 따라 하나 이상의 관계를 지정할 수 있다.
- 2. 이들 간의 관계는 1:M 관계인가? M:M 관계인가?
- 3. 관계 형태에 따른 차이는 무엇인가?
- 4. 그렇다면 `A Entity` 와 `B Entity` 는 과연 1:M 관계에 있는가?
- 5. 실무에서는 이들 관계를 어떻게 정의해야 할 것인가?

2. 다중 관계 (Multi-Relationship)
- 1. 병렬식 (1:M)
  = 1. 여러 개의 속성으로 나누어짐
  = 2. 하나의 로우에 지정됨 (테이블이 추가될 필요 없음)
  = 3. Index 수가 증가될 가능성이 높음
  = 4. 변화에 취약함 (관계가 추가되어야 함)
  = 5. 관계가 자식 Entity 를 가질 수 없음
  = 6. 관계가 여러 개의 속성을 가진다면 매우 불리함

- 2. 직렬식 관리에서 자주 발생되는 문제
  = 1. 속성은 자식을 가질 수 없다.
  = 2. 각 속성별로 상세정보를 관리하고자 한다면?
     -> 1. 부모에서 부탁해서 자식을 놓게 한 다음, 로직으로 찾아서 처리
         => 실무에서 많이 나타나는 현상, 좋은 방법이 아님

     -> 2. Entity 개체는 부모는 상위 Entity 의 UID (속성) 가 아니라 Row (Record) 가 부모

- 3. 직렬식 (M:M)
  = 1. 여러 개의 Row 로 나누어짐
  = 2. 새로운 Table 이 추가됨
  = 3. Index 수가 감소될 가능성이 높아짐
  = 4. 변화에 유리함 (Row 만 추가됨)
  = 5. 관계가 자식 Entity 를 가질 수 있음
  = 6. 관계가 여러 개의 속성을 가지더라도 상관 없음

- 4. 병렬식 관리
  = 1. SUBTYPE 으로 구분
  = 2. 새로운 유형이 관리되더라도 SUBTYPE 만 추가
  = 3. 자식을 가질 수 있다.

3. Attributes (속성)
- 1. ENTITY 내에서 관리하고자 하는 정보들의 항목
  = 1. 자격 부여
  = 2. 식별자
  = 3. Classification (분류)
  = 4. 양(Quantity)의 계수화
  = 5. 상태, 추이의 관리

- 2. ATTRIBUTE 명칭은
  = 1. 의미가 명확하고 내용을 함축성 있게
     -> 1. 속성 정의 시, 내용에 충실하라
     -> 2. Example
         => 번호 : 무슨 번호인지 모른다. = 구매 의뢰 번호 (정확하게 명시해야 한다).

  = 2. 길어도 좋으나 의미에 충실
  = 3. ENTITY 명을 사용하지 말 것
  = 4. 필요 시 표준약어 제정
  = 5. EUC 에 대비해 End-User 의 사용이 쉽도록
  = 6. 가능한 복합명사 (일자 -> 판매일자)
  = 7. 단 하나의 ENTITY 에만 속하도록

- 3. ATTRIBUTE 검증 4단계
  = 1. 원자 단위
     -> 1. 더 이상 분할되지 않는지에 대한 여부
     -> 2. 업무에 따라 (속성 의미에 따라) 달라짐

  = 2. SINGLE VALUE
     -> 값이 한 개

  = 3. 추출 값 (Derived Value)
     -> 가공해서 만들 수 있는 값인지 아니면 소스인지에 대해 판단하는 여부

  = 4. 보다 상세한 관리
     -> 1. 속성 검증 진행 시
         => 속성 갈라짐, 변함, 새로운 ENTITY 탄생 가능
     
     -> 2. 속성 분리할 수 있는 중요한 기준을 위해
         => 예) 홍 + 길동 -> 붙인 것인 속성? 아니면 떼어낸 것이 속성?

4. ATTRIBUTE 지정 원칙 (4단계)
- 1. 최소 단위까지 분할
  = 1. 속성의 의미
     -> 1. 사물의 본질을 이루는 성질
     -> 2. 혼자서도 독립적인 의미를 갖는지에 대한 여부

  = 2. 속성의 특징
     -> 1. 집합 개념의 ATTRIBUTE 는 단순개념으로 분할
     -> 2. 가능한 최소 단위까지 분할한 후, 관리 필요에 따라 통합
     -> 3. 일자, 시간, 성명, 주민등록번호, 우편번호 등은 일반적으로 분할하지 않는 것이 좋음
     -> 4. 주소와 같은 것은 그냥 두었다가 설계단계에서 필요 시 분할
     -> 5. 분할 및 통합의 기준은 업무의 요구사항에 따름

5. 분할 or 결합
- 1. 가장 많이 나타나는 부분 -> 일자 부분
  = 1. YYYY + MM + DD ? or Yyyymmdd ?
  
- 2. RDB 는 포인트를 가지고 있지 않음
  = 1. 흔히 많이 나타나는 경우가 시간
     -> 일자 + 타임을 붙여서 사용한 경우에 일자만 주로 사용 시, 항상 LIKE 를 써야 함 -> 효율 떨어짐

  = 2. 날짜를 RANGE 의 크기를 줄여줌
  = 3. 우편 번호
     -> 자르면 아무 의미 없음
     
  = 4. 전표 번호
     -> 1. 분리하는 것이 맞음
     -> 2. 일자에 대해선 전표일련번호가 계속 발생하므로, 분리

  = 5. 속성도
     -> 1. 묶어서 하나의 속성으로 불 것?
     -> 2. 각각 띄워서 속성으로 볼 것?

  = 6. 전화 번호
     -> 지역 번호 & 개별 번호 & 국번-> 통신 회사에서 관리하는 번호는 전부 의미가 있음
