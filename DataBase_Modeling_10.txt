1. 잘못된 속성 분할 사례
- 1. 2000/06 ~ 2000/07
  = YY => '200005' and MM between '05' and '07'

- 2. 2001/09 ~ 2002/02
  = 1. 잘못된 예제 -> YY between '2001' and '2002' and 'MM' between '09' and '02'
  = 2. 맞는 예제 -> YY | MM  between '200109' and '200202' (Index 사용 불가)

2. ATTRIBUTE 지정 원칙 (4단계)
- 2. 하나의 값만 가지는가?
  = 1. 여러 값을 가지거나 반복되는 ATTRIBUTE 는 잘못됨
  = 2. 반복되는 경우 새로운 ENTITY 로 분할
  = 3. 속성 의미에 대한 정의에 따라 하나일 수도, 여러 개일 수도 있음
  = 4. 배타적 관계는 가능한 하나의 속성으로 통합할 것

- 3. 추출 값 (derived data) 검증
  = 1. 일반적인 예
     -> 1. 개수 (COUNT) : 특정 범위의 개수, ...
     -> 2. 합계 (TOTAL) : 특정 기간의 총 매출액, ...
     -> 3. 최대 / 최소 / 평균 (MAX / MIN / AVG) : 통계 정보
     -> 4. 기타 계산 : 급여의 10%, 금액 (= 단가 * 수량)
  
  = 2. 이력 관리를 어떻게 하느냐에 따라 추출 값이 아닐 수도 있음
     -> 추출 값 => SELECT 문 같은 질의어로 데이터를 추출한 값
  
  = 3. 판단이 애매한 경우도 많이 있음
  = 4. E-R MODEL 내에서는 추출 값을 포함시키지 말 것
  = 5. 추후 DB DESIGN 시 검토
  = 6. 추출 값 => 낭비 (Redundance) & 데이터 일관성 저해
  = 7. 추출 값 기본이 되는 ATTRIBUTE 가 변경 되면 같이 변경
  = 8. 꼭 필요한 COLUMN 은 별도로 정리 or 특별한 표시 하기

- 4. 관리 수준 상세화 검토
  = 1. ATTRIBUTE 가 자신 소유의 ATTRIBUTE 를 가지면 ENTITY
  = 2. 현재에 만족하지 말고, 미래의 관리 수준을 감안
  = 3. 간과할 경우, 많은 보완이 발생
  = 4. 도덕성, 적극성, 인간미의 문제 (모델러)
  = 5. 한 번 더 깊이 생각하지 않으면 우리 눈에 보이지 않음
  = 6. 모델링 시에 좀 더 깊이 파헤친 것이 시간 및 비용 절약의 보전

4. 추출 값의 판단
- 1. M 쪽 속성이 1쪽으로 가려면
  = 1. (부모 ENTITY) : M (자식 ENTITY)
  = 2. SUM, COUNT, MAX 등
  = 3. 실무에서는 상위 ENTITY 에 하위 ENTITY 의 속성이 존재하는 경우가 자주 보임
  = 4. 특히 자식의 최근 값을 가져다 둔 경우가 매우 많음

- 2. 수량 * 단가 = 금액
  = 1. 추출 속성 가능 or  추출 속성 불가능
  = 2. 0.1% 라도 다른 정보로 재현할 수 없다면 추출 속성이 아님

5. ATTRIBUTE 의 선택 사양
- 1. 선택사양의 표시
  = 1. 반드시 값이 존재해야 하는 (Mandatory) ATTRIBUTE -> *
  = 2. 값을 반드시 가지지 않을 수 (Optional) 있는 ATTRIBUTE -> O

- 2. 검증 위한 사례 (Instance) 데이터 작성
  = 1. 도상 훈련
  = 2. 가장 적은 비용으로 데이터 모델 검증할 수 있는 유일한 방법
  = 3. 가장 많은 특수 사례를 정의할 수 있도록 매우 꼼꼼하게 작성

